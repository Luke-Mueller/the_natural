/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// TODO DATA CONTROLLER\nvar test = function test() {\n  return console.log(123);\n}; // Data variables\n\n\nvar deck = [{\n  rank: 'ace',\n  suit: 'spades',\n  value: 11,\n  id: 'AS'\n}, {\n  rank: '2',\n  suit: 'spades',\n  value: 2,\n  id: '2S'\n}, {\n  rank: '3',\n  suit: 'spades',\n  value: 3,\n  id: '3S'\n}, {\n  rank: '4',\n  suit: 'spades',\n  value: 4,\n  id: '4S'\n}, {\n  rank: '5',\n  suit: 'spades',\n  value: 5,\n  id: '5S'\n}, {\n  rank: '6',\n  suit: 'spades',\n  value: 6,\n  id: '6S'\n}, {\n  rank: '7',\n  suit: 'spades',\n  value: 7,\n  id: '7S'\n}, {\n  rank: '8',\n  suit: 'spades',\n  value: 8,\n  id: '8S'\n}, {\n  rank: '9',\n  suit: 'spades',\n  value: 9,\n  id: '9S'\n}, {\n  rank: '10',\n  suit: 'spades',\n  value: 10,\n  id: '10S'\n}, {\n  rank: 'jack',\n  suit: 'spades',\n  value: 10,\n  id: 'JS'\n}, {\n  rank: 'queen',\n  suit: 'spades',\n  value: 10,\n  id: 'QS'\n}, {\n  rank: 'king',\n  suit: 'spades',\n  value: 10,\n  id: 'KS'\n}, {\n  rank: 'ace',\n  suit: 'hearts',\n  value: 11,\n  id: 'AH'\n}, {\n  rank: '2',\n  suit: 'hearts',\n  value: 2,\n  id: '2H'\n}, {\n  rank: '3',\n  suit: 'hearts',\n  value: 3,\n  id: '3H'\n}, {\n  rank: '4',\n  suit: 'hearts',\n  value: 4,\n  id: '4H'\n}, {\n  rank: '5',\n  suit: 'hearts',\n  value: 5,\n  id: '5H'\n}, {\n  rank: '6',\n  suit: 'hearts',\n  value: 6,\n  id: '6H'\n}, {\n  rank: '7',\n  suit: 'hearts',\n  value: 7,\n  id: '7H'\n}, {\n  rank: '8',\n  suit: 'hearts',\n  value: 8,\n  id: '8H'\n}, {\n  rank: '9',\n  suit: 'hearts',\n  value: 9,\n  id: '9H'\n}, {\n  rank: '10',\n  suit: 'hearts',\n  value: 10,\n  id: '10H'\n}, {\n  rank: 'jack',\n  suit: 'hearts',\n  value: 10,\n  id: 'JH'\n}, {\n  rank: 'queen',\n  suit: 'hearts',\n  value: 10,\n  id: 'QH'\n}, {\n  rank: 'king',\n  suit: 'hearts',\n  value: 10,\n  id: 'KH'\n}, {\n  rank: 'ace',\n  suit: 'diamonds',\n  value: 11,\n  id: 'AD'\n}, {\n  rank: '2',\n  suit: 'diamonds',\n  value: 2,\n  id: '2D'\n}, {\n  rank: '3',\n  suit: 'diamonds',\n  value: 3,\n  id: '3D'\n}, {\n  rank: '4',\n  suit: 'diamonds',\n  value: 4,\n  id: '4D'\n}, {\n  rank: '5',\n  suit: 'diamonds',\n  value: 5,\n  id: '5D'\n}, {\n  rank: '6',\n  suit: 'diamonds',\n  value: 6,\n  id: '6D'\n}, {\n  rank: '7',\n  suit: 'diamonds',\n  value: 7,\n  id: '7D'\n}, {\n  rank: '8',\n  suit: 'diamonds',\n  value: 8,\n  id: '8D'\n}, {\n  rank: '9',\n  suit: 'diamonds',\n  value: 9,\n  id: '9D'\n}, {\n  rank: '10',\n  suit: 'diamonds',\n  value: 10,\n  id: '10D'\n}, {\n  rank: 'jack',\n  suit: 'diamonds',\n  value: 10,\n  id: 'JD'\n}, {\n  rank: 'queen',\n  suit: 'diamonds',\n  value: 10,\n  id: 'QD'\n}, {\n  rank: 'king',\n  suit: 'diamonds',\n  value: 10,\n  id: 'KD'\n}, {\n  rank: 'ace',\n  suit: 'clubs',\n  value: 11,\n  id: 'AC'\n}, {\n  rank: '2',\n  suit: 'clubs',\n  value: 2,\n  id: '2C'\n}, {\n  rank: '3',\n  suit: 'clubs',\n  value: 3,\n  id: '3C'\n}, {\n  rank: '4',\n  suit: 'clubs',\n  value: 4,\n  id: '4C'\n}, {\n  rank: '5',\n  suit: 'clubs',\n  value: 5,\n  id: '5C'\n}, {\n  rank: '6',\n  suit: 'clubs',\n  value: 6,\n  id: '6C'\n}, {\n  rank: '7',\n  suit: 'clubs',\n  value: 7,\n  id: '7C'\n}, {\n  rank: '8',\n  suit: 'clubs',\n  value: 8,\n  id: '8C'\n}, {\n  rank: '9',\n  suit: 'clubs',\n  value: 9,\n  id: '9C'\n}, {\n  rank: '10',\n  suit: 'clubs',\n  value: 10,\n  id: '10C'\n}, {\n  rank: 'jack',\n  suit: 'clubs',\n  value: 10,\n  id: 'JC'\n}, {\n  rank: 'queen',\n  suit: 'clubs',\n  value: 10,\n  id: 'QC'\n}, {\n  rank: 'king',\n  suit: 'clubs',\n  value: 10,\n  id: 'KC'\n}],\n    playerHand1 = [],\n    playerHand2 = [],\n    playerHand3 = [],\n    playerHand4 = [],\n    dealerHand = [],\n    wastePile = [],\n    playerRoundTotal1,\n    playerRoundTotal2,\n    playerRoundTotal3,\n    playerRoundTotal4,\n    dealerRoundTotal;\nvar blackjack = 21.5,\n    player1 = document.getElementById('player1'),\n    player2 = document.getElementById('player2'),\n    player3 = document.getElementById('player3'),\n    player4 = document.getElementById('player4'),\n    dealer = document.getElementById('dealer'); // Data functions\n\nfunction dealCard() {\n  // Get random card\n  randomNum = Math.floor(Math.random() * deck.length);\n  randomCard = deck[randomNum]; // Remove the random card from the deck\n\n  deck = deck.filter(function (card) {\n    return card !== randomCard;\n  }); // Return the random card\n\n  return randomCard;\n}\n\nfunction clearHands() {\n  // Variables and functions\n  function clearHand(hand) {\n    if (hand !== []) hand.forEach(function (card) {\n      return wastePile.push(card);\n    });\n  } // Push last round's hands into wastePile and empty hands\n\n\n  if (playerHand1 !== []) clearHand(playerHand1), playerHand1 = [], playerRoundTotal1 = 0;\n  if (playerHand2 !== []) clearHand(playerHand2), playerHand2 = [], playerRoundTotal2 = 0;\n  if (playerHand3 !== []) clearHand(playerHand3), playerHand3 = [], playerRoundTotal3 = 0;\n  if (playerHand4 !== []) clearHand(playerHand4), playerHand4 = [], playerRoundTotal4 = 0;\n  if (dealerHand !== []) clearHand(dealerHand), dealerHand = [], dealerRoundTotal = 0;\n}\n\nfunction reShuffleDeck() {\n  wastePile.forEach(function (card) {\n    if (card.rank === 'ace') card.value = 11;\n    deck.push(card);\n  });\n  wastePile = [];\n}\n\nfunction resetActiveClass() {\n  player2.classList.remove('active');\n  player3.classList.remove('active');\n  player4.classList.remove('active');\n  dealer.classList.remove('active');\n  player1.classList.add('active');\n}\n\nfunction checkAceValue(roundTotal, hand) {\n  while (roundTotal > 21.5 && hand.find(function (card) {\n    return card.value === 11;\n  }) !== undefined) {\n    roundTotal = 0;\n    hand.forEach(function (card) {\n      if (card.value === 11) card.value = 1;\n      roundTotal += card.value;\n    });\n  }\n\n  return roundTotal;\n}\n\nfunction calcPlayerRoundTotal() {\n  // Variables and functions\n  var playerHand;\n  var playerRoundTotal = 0;\n\n  function calcRoundTotal() {\n    playerHand.forEach(function (card) {\n      playerRoundTotal += card.value;\n    });\n  } // Determine correct hand to calculate and calculate with aces rule\n\n\n  if (player1.classList.contains('active')) {\n    playerHand = playerHand1;\n    calcRoundTotal();\n    playerRoundTotal1 = checkAceValue(playerRoundTotal, playerHand);\n    return playerRoundTotal1;\n  } else if (player2.classList.contains('active')) {\n    playerHand = playerHand2;\n    calcRoundTotal();\n    playerRoundTotal2 = checkAceValue(playerRoundTotal, playerHand);\n    return playerRoundTotal2;\n  } else if (player3.classList.contains('active')) {\n    playerHand = playerHand3;\n    calcRoundTotal();\n    playerRoundTotal3 = checkAceValue(playerRoundTotal, playerHand);\n    return playerRoundTotal3;\n  } else if (player4.classList.contains('active')) {\n    playerHand = playerHand4;\n    calcRoundTotal();\n    playerRoundTotal4 = checkAceValue(playerRoundTotal, playerHand);\n    return playerRoundTotal4;\n  }\n}\n\nfunction calcDealerRoundTotal() {\n  dealerRoundTotal = 0;\n  dealerHand.forEach(function (card) {\n    dealerRoundTotal += card.value;\n  });\n  dealerRoundTotal = checkAceValue(dealerRoundTotal, dealerHand);\n} // TODO UI CONTROLLER\n// UI functions\n\n\nfunction displayCard(card, person) {\n  var li = document.createElement('li');\n  var left = document.getElementById(person).childElementCount * 8 + 'vw';\n\n  if (person !== 'dealer') {\n    li.innerHTML = \"<img class=\\\"card\\\" src=\\\"./images/\".concat(card.id, \".png\\\" alt=\\\"\\\"/>\");\n    li.style.marginLeft = left;\n    document.getElementById(person).appendChild(li);\n  } else {\n    li.innerHTML = \"<img class=\\\"card\\\" src=\\\"./images/\".concat(card.id, \".png\\\" alt=\\\"\\\"/>\");\n    document.getElementById(person).appendChild(li);\n  }\n}\n\nfunction clearDisplay() {\n  while (player1.lastChild) {\n    player1.removeChild(player1.lastChild);\n  }\n\n  while (player2.lastChild) {\n    player2.removeChild(player2.lastChild);\n  }\n\n  while (player3.lastChild) {\n    player3.removeChild(player3.lastChild);\n  }\n\n  while (player4.lastChild) {\n    player4.removeChild(player4.lastChild);\n  }\n\n  while (dealer.lastChild) {\n    dealer.removeChild(dealer.lastChild);\n  }\n\n  player2.style.display = 'none';\n  player3.style.display = 'none';\n  player4.style.display = 'none';\n} // TODO APP CONTROLLER\n// App variables\n\n\nvar btnDeal = document.getElementById('btnDeal'),\n    btnHit = document.getElementById('btnHit'),\n    btnStand = document.getElementById('btnStand'),\n    btnSplitStand = document.getElementById('btnSplitStand'),\n    btnSplit = document.getElementById('btnSplit'),\n    btnReSplit = document.getElementById('btnReSplit'); // Event Handlers\n\nbtnDeal.addEventListener('click', dealRound);\nbtnHit.addEventListener('click', hit);\nbtnSplit.addEventListener('click', split);\nbtnReSplit.addEventListener('click', reSplit);\nbtnStand.addEventListener('click', stand);\nbtnSplitStand.addEventListener('click', splitStand); // App functions\n\nfunction initNewRound() {\n  resetActiveClass();\n  clearHands();\n  clearDisplay(); // RESHUFFLE DECK\n\n  if (deck.length <= 13) {\n    reShuffleDeck();\n  }\n}\n\nfunction dealHands() {\n  for (var i = 0; i < 4; i++) {\n    var card = dealCard();\n\n    if (i === 0 || i === 2) {\n      playerHand1.push(card);\n      displayCard(card, 'player1');\n    } else if (i === 1) {\n      dealerHand.push(card);\n      displayCard(card, 'dealer');\n    } else if (i === 3) {\n      dealerHand.push(card); // displayCard(card, 'dealer');\n    }\n  }\n}\n\nfunction resetAceValue() {\n  playerHand1[0].rank === 'ace' ? playerHand1[0].value = 11 : null;\n}\n\nfunction dealRound() {\n  // Initialize new round\n  initNewRound(); // Deal hands\n\n  dealHands(); // Calc playerRoundTotal\n\n  calcPlayerRoundTotal();\n  calcDealerRoundTotal(); // Dealer gets blackjack\n\n  if (dealerRoundTotal === 21) {\n    dealerRoundTotal = blackjack;\n  } // Player gets blackjack, split, or else\n\n\n  if (playerRoundTotal1 === 21) {\n    playerRoundTotal1 = blackjack; // Change active class from player to dealer\n\n    player1.classList.remove('active');\n    dealer.classList.add('active'); // Display dealer's down card\n\n    displayCard(dealerHand[1], 'dealer'); // Console log the result\n\n    dealerRoundTotal === 21.5 ? console.log('Push: Double Blackjack') : console.log('Blackjack! You win the hand');\n  } else if (playerHand1[0].rank === playerHand1[1].rank) {\n    // Display hit, split, and stand buttons and hide deal button\n    btnHit.style.display = 'block';\n    btnSplit.style.display = 'block';\n    btnStand.style.display = 'block';\n    btnDeal.style.display = 'none';\n  } else {\n    // Display hit and stand buttons and hide deal button\n    btnHit.style.display = 'block';\n    btnStand.style.display = 'block';\n    btnDeal.style.display = 'none';\n  } // Display playerRoundScore\n\n\n  if (playerRoundTotal1 !== 21.5) {\n    console.log(playerRoundTotal1);\n  }\n}\n\nfunction hit() {\n  // Disable split button\n  btnSplit.style.display = 'none'; // Set the card dealt to a variable\n\n  var card = dealCard(); // Determine the active hand, set it to playerHand, and display it\n\n  var playerHand;\n\n  if (player1.classList.contains('active')) {\n    playerHand = playerHand1;\n    displayCard(card, 'player1');\n  } else if (player2.classList.contains('active')) {\n    playerHand = playerHand2;\n    displayCard(card, 'player2');\n  } else if (player3.classList.contains('active')) {\n    playerHand = playerHand3;\n    displayCard(card, 'player3');\n  } else if (player4.classList.contains('active')) {\n    playerHand = playerHand4;\n    displayCard(card, 'player4');\n  } // Deal card to the determined hand\n\n\n  playerHand.push(card); // Calculate player score\n\n  var playerRoundTotal = calcPlayerRoundTotal();\n  console.log(playerRoundTotal); // Enable re-split btn\n\n  if (player1.classList.contains('active')) {\n    playerHand1.length === 2 && playerHand1[0].rank === playerHand1[1].rank && player2.childElementCount === 0 ? btnReSplit.style.display = 'block' : btnReSplit.style.display = 'none';\n  }\n\n  if (player3.classList.contains('active')) {\n    playerHand3.length === 2 && playerHand3[0].rank === playerHand3[1].rank && player4.childElementCount === 0 ? btnReSplit.style.display = 'block' : btnReSplit.style.display = 'none';\n  } // BUST\n\n\n  if (player1.classList.contains('active') && playerRoundTotal > 21.5) {\n    console.log('Hand one busted: ', playerRoundTotal1);\n\n    if (player2.childElementCount !== 0) {\n      player1.classList.remove('active');\n      player2.classList.add('active');\n      hit();\n    } else if (player3.childElementCount !== 0) {\n      player1.classList.remove('active');\n      player3.classList.add('active');\n      hit();\n    } else {\n      btnDeal.style.display = 'block';\n      btnHit.style.display = 'none';\n      btnStand.style.display = 'none';\n      btnSplitStand.style.display = 'none';\n    }\n  } else if (player2.classList.contains('active') && playerRoundTotal > 21.5) {\n    console.log('Hand two busted: ', playerRoundTotal2);\n    player2.classList.remove('active');\n    player3.classList.add('active');\n    hit();\n  } else if (player3.classList.contains('active') && playerRoundTotal > 21.5) {\n    console.log('Hand three busted: ', playerRoundTotal3);\n\n    if (player4.childElementCount !== 0) {\n      btnSplitStand.style.display = 'none';\n      btnStand.style.display = 'block';\n      player3.classList.remove('active');\n      player4.classList.add('active');\n      hit();\n    } else if (playerRoundTotal1 > 21.5 && (playerRoundTotal2 === undefined || playerRoundTotal2 > 21.5)) {\n      btnDeal.style.display = 'block';\n      btnHit.style.display = 'none';\n      btnStand.style.display = 'none';\n      btnSplitStand.style.display = 'none';\n      player3.classList.remove('active');\n    } else {\n      stand();\n    }\n  } else if (player4.classList.contains('active') && playerRoundTotal > 21.5) {\n    console.log('Hand four busted: ', playerRoundTotal4);\n    player4.classList.remove('active');\n\n    if (playerRoundTotal1 > 21.5 && playerRoundTotal2 > 21.5 && playerRoundTotal3 > 21.5) {\n      btnDeal.style.display = 'block';\n      btnHit.style.display = 'none';\n      btnStand.style.display = 'none';\n      btnSplitStand.style.display = 'none';\n    } else {\n      stand();\n    }\n  }\n\n  return playerRoundTotal;\n}\n\nfunction stand() {\n  // Change active class from player to dealer\n  if (player1.classList.contains('active')) {\n    player1.classList.remove('active');\n  } else if (player3.classList.contains('active')) {\n    player3.classList.remove('active');\n  } else if (player4.classList.contains('active')) {\n    player4.classList.remove('active');\n  }\n\n  dealer.classList.add('active'); // Display dealer's down card\n\n  displayCard(dealerHand[1], 'dealer'); // Calculate dealerRoundTotal\n\n  calcDealerRoundTotal(); // Dealer gets blackjack\n\n  if (dealerRoundTotal === 21) {\n    dealerRoundTotal = 21.5;\n  } // Dealer must hit up to 17\n\n\n  while (dealerRoundTotal < 17) {\n    var card = dealCard();\n    dealerHand.push(card);\n    displayCard(card, 'dealer');\n    calcDealerRoundTotal();\n  } // Dealer busts\n\n\n  if (dealerRoundTotal > 21.5) {\n    console.log('The dealer busted');\n\n    if (playerRoundTotal1 < 22) {\n      console.log('You win hand one: ', playerRoundTotal1, '-', dealerRoundTotal);\n    }\n\n    if (player2.childElementCount && playerRoundTotal2 < 22) {\n      console.log('You win hand two: ', playerRoundTotal2, '-', dealerRoundTotal);\n    }\n\n    if (player3.childElementCount && playerRoundTotal3 < 22) {\n      console.log('You win hand three: ', playerRoundTotal3, '-', dealerRoundTotal);\n    }\n\n    if (player4.childElementCount && playerRoundTotal4 < 22) {\n      console.log('You win hand four: ', playerRoundTotal4, '-', dealerRoundTotal);\n    }\n  } // Dealer does not bust, so compare and display round totals\n\n\n  if (dealerRoundTotal < 22) {\n    if (playerRoundTotal1 < 22 && playerRoundTotal1 > dealerRoundTotal) {\n      console.log('You win hand one: ', playerRoundTotal1, '-', dealerRoundTotal);\n    } else if (playerRoundTotal1 < 22 && playerRoundTotal1 < dealerRoundTotal) {\n      console.log('The dealer wins hand one: ', playerRoundTotal1, '-', dealerRoundTotal);\n    } else if (playerRoundTotal1 < 22 && playerRoundTotal1 === dealerRoundTotal) {\n      console.log('Push: ', playerRoundTotal1, '-', dealerRoundTotal);\n    }\n\n    if (playerRoundTotal2 > 0 && playerRoundTotal2 < 22 && playerRoundTotal2 > dealerRoundTotal) {\n      console.log('You win hand two: ', playerRoundTotal2, '-', dealerRoundTotal);\n    } else if (playerRoundTotal2 > 0 && playerRoundTotal2 < 22 && playerRoundTotal2 < dealerRoundTotal) {\n      console.log('The dealer wins hand two: ', playerRoundTotal2, '-', dealerRoundTotal);\n    } else if (playerRoundTotal2 < 22 && playerRoundTotal2 === dealerRoundTotal) {\n      console.log('Push: ', playerRoundTotal2, '-', dealerRoundTotal);\n    }\n\n    if (playerRoundTotal3 > 0 && playerRoundTotal3 < 22 && playerRoundTotal3 > dealerRoundTotal) {\n      console.log('You win hand three: ', playerRoundTotal3, '-', dealerRoundTotal);\n    } else if (playerRoundTotal3 > 0 && playerRoundTotal3 < 22 && playerRoundTotal3 < dealerRoundTotal) {\n      console.log('The dealer wins hand three: ', playerRoundTotal3, '-', dealerRoundTotal);\n    } else if (playerRoundTotal3 < 22 && playerRoundTotal3 === dealerRoundTotal) {\n      console.log('Push: ', playerRoundTotal3, '-', dealerRoundTotal);\n    }\n\n    if (playerRoundTotal4 > 0 && playerRoundTotal4 < 22 && playerRoundTotal4 > dealerRoundTotal) {\n      console.log('You win hand four: ', playerRoundTotal4, '-', dealerRoundTotal);\n    } else if (playerRoundTotal4 > 0 && playerRoundTotal4 < 22 && playerRoundTotal4 < dealerRoundTotal) {\n      console.log('The dealer wins hand four: ', playerRoundTotal4, '-', dealerRoundTotal);\n    } else if (playerRoundTotal4 < 22 && playerRoundTotal4 === dealerRoundTotal) {\n      console.log('Push:', playerRoundTotal4, '-', dealerRoundTotal);\n    }\n  } // Remove hit and stand btn and add deal btn\n\n\n  btnHit.style.display = 'none';\n  btnStand.style.display = 'none';\n  btnSplitStand.style.display = 'none';\n  btnSplit.style.display = 'none';\n  btnDeal.style.display = 'block';\n}\n\nfunction splitStand() {\n  // Variables and functions\n  var playerRoundTotal;\n\n  function setActiveClass(removedFrom, addedTo) {\n    removedFrom.classList.remove('active');\n    addedTo.classList.add('active');\n  } // Change active class and hit or stand\n\n\n  if (player1.classList.contains('active') && player2.childElementCount === 0) {\n    playerRoundTotal = playerRoundTotal1;\n    setActiveClass(player1, player3); // Replace btnSplitStand with btnSplit\n\n    btnSplitStand.style.display = 'none';\n    btnStand.style.display = 'block';\n    btnReSplit.style.display = 'none';\n    hit();\n  } else if (player1.classList.contains('active') && player2.childElementCount !== 0) {\n    playerRoundTotal = playerRoundTotal1;\n    setActiveClass(player1, player2);\n    hit();\n  } else if (player2.classList.contains('active')) {\n    playerRoundTotal = playerRoundTotal2;\n    setActiveClass(player2, player3); // Replace btnSplitStand with btnSplit\n\n    btnSplitStand.style.display = 'none';\n    btnStand.style.display = 'block';\n    hit();\n  } else if (player3.classList.contains('active') && player4.childElementCount === 0) {\n    playerRoundTotal = playerRoundTotal3;\n    stand();\n  } else if (player3.classList.contains('active') && player4.childElementCount !== 0) {\n    playerRoundTotal = playerRoundTotal3;\n    setActiveClass(player3, player4); // Replace btnSplitStand with btnSplit\n\n    btnSplitStand.style.display = 'none';\n    btnStand.style.display = 'block';\n    hit();\n  } else if (player4.classList.contains('active')) {\n    playerRoundTotal = playerRoundTotal4;\n    stand();\n  }\n\n  return playerRoundTotal;\n}\n\nfunction split() {\n  // Move li from player1 ul to player3 ul\n  var oldChild = player1.removeChild(player1.lastChild);\n  oldChild.style.marginLeft = '0';\n  player3.style.display = 'flex';\n  player3.appendChild(oldChild); // Split hands in data module\n\n  playerHand3 = [playerHand1[1]];\n  playerHand1 = [playerHand1[0]];\n  resetAceValue(); // Set player round totals\n\n  playerRoundTotal1 = playerHand1[0].value;\n  playerRoundTotal3 = playerHand3[0].value;\n  hit(); // Change buttons\n\n  btnSplit.style.display = 'none';\n  btnStand.style.display = 'none';\n  btnSplitStand.style.display = 'block';\n\n  if (playerHand1[0].rank === playerHand1[1].rank) {\n    btnReSplit.style.display = 'block';\n  }\n}\n\nfunction reSplit() {\n  // Variables and functions\n  function displaySplitHand(handFrom, handTo) {\n    var oldChild = handFrom.removeChild(handFrom.lastChild);\n    oldChild.style.marginLeft = '0';\n    handTo.style.display = 'flex';\n    handTo.appendChild(oldChild);\n  }\n\n  function reSplitHand1() {\n    playerHand2 = [playerHand1[1]];\n    playerHand1 = [playerHand1[0]];\n  }\n\n  function reSplitHand3() {\n    playerHand4 = [playerHand3[1]];\n    playerHand3 = [playerHand3[0]];\n  } // Hide re-split btn\n\n\n  btnReSplit.style.display = 'none';\n\n  if (player1.classList.contains('active')) {\n    displaySplitHand(player1, player2);\n    reSplitHand1();\n    resetAceValue(); // Set playerRoundTotal values\n\n    playerRoundTotal1 = playerHand1[0].value;\n    playerRoundTotal2 = playerHand2[0].value;\n    hit();\n  } else if (player3.classList.contains('active')) {\n    // Replace btnSplitStand with btnSplit\n    btnStand.style.display = 'none';\n    btnSplitStand.style.display = 'block';\n    displaySplitHand(player3, player4);\n    reSplitHand3();\n    resetAceValue(); // Set playerRoundTotal values\n\n    playerRoundTotal3 = playerHand3[0].value;\n    playerRoundTotal4 = playerHand4[0].value;\n    hit();\n  }\n}\n/* TODO\n\nchange deck shuffle\nimplement a betting system\nif splitting aces, player only draws one more card\n\n */\n\n/*\n\nfunction splitHand (handFrom, handTo) {\n    let oldChild = handFrom.removeChild(handFrom.lastChild);\n    handTo.style.display = 'flex';\n    handTo.appendChild(oldChild);\n  }\n\n\nfunction split() {\n\n  if (player1.classList.contains('active') && player3.childElementCount === 0) {\n    // Split hands in ui\n    splitHand (player1, player3);\n\n    // Split hands in data\n    playerHand1 = playerHand1[0].value;\n    playerHand3 = playerHand3[0].value;\n\n    resetAceValue();\n\n    // Set player round totals\n    playerRoundTotal1 = playerHand1[0].value;\n    playerRoundTotal3 = playerHand3[0].value;\n\n    hit();\n  } else if (player1.classList.contains('active') && player3.childElementCount !== 0) {\n    // Split hands in ui\n    splitHand (player1, player2);\n\n    // Split hands in data\n    playerHand1 = playerHand1[0].value;\n    playerHand2 = playerHand2[0].value;\n\n    resetAceValue();\n\n    // Set player round totals\n    playerRoundTotal1 = playerHand1[0].value;\n    playerRoundTotal2 = playerHand2[0].value;\n\n    hit();\n    } else if (player3.classList.contains('active') && player4.childElementCount === 0) {\n    // Split hands in ui\n    splitHand (player3, player4);\n\n    // Split hands in data\n    playerHand3 = playerHand3[0].value;\n    playerHand4 = playerHand4[0].value;\n\n    resetAceValue();\n\n    // Set player round totals\n    playerRoundTotal1 = playerHand1[0].value;\n    playerRoundTotal3 = playerHand3[0].value;\n\n    hit();\n  }\n\n}\n */\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ })

/******/ });